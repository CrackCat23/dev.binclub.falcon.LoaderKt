package dev.binclub.falcon;

import java.io.File;
import java.io.FileInputStream;
import java.lang.reflect.Field;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.Unit;
import kotlin.io.ByteStreamsKt;
import kotlin.io.CloseableKt;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Ref;
import kotlin.jvm.internal.TypeIntrinsics;
import kotlin.text.StringsKt;
import net.minecraft.launchwrapper.Launch;
import net.minecraft.launchwrapper.LaunchClassLoader;

@Metadata(mv = {1, 1, 16}, bv = {1, 0, 3}, k = 2, d1 = {"\000\b\n\000\n\002\020\002\n\000\032\006\020\000\032\0020\001\006\002"}, d2 = {"load", "", "konas"})
public final class LoaderKt {
  public static final void load() {
    Field field1 = LaunchClassLoader.class.getDeclaredField("resourceCache");
    boolean bool1 = false, bool2 = false;
    Field it = field1;
    int $i$a$-let-LoaderKt$load$resourceCache$1 = 0;
    Intrinsics.checkExpressionValueIsNotNull(it, "it");
    it.setAccessible(true);
    if (it.get(Launch.classLoader) == null)
      throw new TypeCastException("null cannot be cast to non-null type kotlin.collections.MutableMap<kotlin.String, kotlin.ByteArray>"); 
    Map<String, byte[]> resourceCache = TypeIntrinsics.asMutableMap(it.get(Launch.classLoader));
    String str = "Loading KonasClient";
    bool1 = false;
    System.out.println(str);
    File file = new File("konas.jar");
    bool2 = false;
    FileInputStream s2 = new FileInputStream(file);
    ZipInputStream zipInputStream = new ZipInputStream(s2);
    bool2 = false;
    Throwable throwable = (Throwable)null;
    try {
      ZipInputStream zipStream = zipInputStream;
      int $i$a$-use-LoaderKt$load$1 = 0;
      Ref.ObjectRef zipEntry = new Ref.ObjectRef();
      while (true) {
        ZipEntry zipEntry1 = zipStream.getNextEntry();
        boolean bool3 = false, bool4 = false;
        ZipEntry zipEntry2 = zipEntry1;
        int $i$a$-also-LoaderKt$load$1$1 = 0;
        zipEntry.element = zipEntry2;
        if (zipEntry1 != null) {
          if ((ZipEntry)zipEntry.element == null)
            Intrinsics.throwNpe(); 
          String name = ((ZipEntry)zipEntry.element).getName();
          Intrinsics.checkExpressionValueIsNotNull(name, "name");
          if (StringsKt.endsWith$default(name, ".class", false, 2, null)) {
            name = StringsKt.removeSuffix(name, ".class");
            name = StringsKt.replace$default(name, '/', '.', false, 4, null);
            resourceCache.put(name, ByteStreamsKt.readBytes(zipStream));
          } 
          continue;
        } 
        break;
      } 
      Unit unit = Unit.INSTANCE;
    } catch (Throwable throwable1) {
      throwable = throwable1 = null;
      throw throwable1;
    } finally {
      CloseableKt.closeFinally(zipInputStream, throwable);
    } 
    KonasAdapter.setResourceCache(resourceCache);
  }
}
